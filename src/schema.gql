# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface Alert {
  createdAt: DateTime!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipient: User!
  recipientId: HashId!
}

interface Chat {
  createdAt: DateTime!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  updatedAt: DateTime!
}

interface ChatAccessAlert implements Alert & ChatAlert {
  chat: Chat!
  chatId: HashId!
  createdAt: DateTime!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipient: User!
  recipientId: HashId!
}

interface ChatAlert implements Alert {
  chat: Chat!
  chatId: HashId!
  createdAt: DateTime!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipient: User!
  recipientId: HashId!
}

type ChatDeletedAlert implements Alert {
  chat: User!
  chatId: HashId!
  createdAt: DateTime!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipient: User!
  recipientId: HashId!
}

type ChatDescriptionUpdate implements ChatUpdate {
  descriptionAfter: String!
  descriptionBefore: String!
  event: Event!
  eventId: Float!
}

type ChatMemberAccessGrantedAlert implements Alert & ChatAccessAlert & ChatAlert {
  chat: Chat!
  chatId: HashId!
  createdAt: DateTime!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipient: User!
  recipientId: HashId!
}

interface ChatMemberAlteration {
  members: [Member!]!
}

type ChatMembersAddedUpdate implements ChatMemberAlteration {
  members: [Member!]!
}

type ChatMembersRemovedUpdate implements ChatMemberAlteration {
  members: [Member!]!
}

interface ChatUpdate {
  event: Event!
  eventId: Float!
}

type CreatedEvent implements Event {
  chat: Chat!
  chatId: HashId!
  createdAt: DateTime!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  payload: PayloadUnion!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeletedChat implements Chat {
  createdAt: DateTime!
  createdBy: User!
  createdById: HashId!
  deletedAt: DateTime!
  id: HashId!
  isCreator: Boolean!
  updatedAt: DateTime!
}

type DeletedEvent implements Event {
  chat: Chat!
  chatId: HashId!
  createdAt: DateTime!
  createdBy: User!
  createdById: HashId!
  deletedAt: DateTime!
  id: HashId!
  isCreator: Boolean!
  updatedAt: DateTime!
}

interface Event {
  chat: Chat!
  chatId: HashId!
  createdAt: DateTime!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  updatedAt: DateTime!
}

type EventEdge {
  cursor: String!
  node: Event!
}

type Friend implements KnownUser & User {
  chats: [Chat!]!
  createdAt: DateTime!
  id: HashId!
  name: String
  updatedAt: DateTime!
  username: String!
}

type FriendDeletedAlert implements Alert {
  createdAt: DateTime!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipient: User!
  recipientId: HashId!
  user: User!
  userId: HashId!
}

type FriendEdge {
  cursor: String!
  node: Friend!
}

type FriendRequest implements Request {
  createdAt: DateTime!
  createdBy: User!
  createdById: Float!
  id: HashId!
  isCreator: Boolean!
  recipient: User!
  recipientId: Float!
  state: RequestState!
}

type GroupChat implements Chat {
  createdAt: DateTime!
  createdBy: User!
  createdById: HashId!
  description: String
  id: HashId!
  isCreator: Boolean!
  members: PaginatedMember!
  name: String!
  role: MemberRole!
  updatedAt: DateTime!
}

"""Hash Id custom scalar type"""
scalar HashId

interface KnownUser {
  chats: [Chat!]!
}

type Me implements KnownUser & User {
  chats: [Chat!]!
  createdAt: DateTime!
  id: HashId!
  name: String
  updatedAt: DateTime!
  username: String!
}

interface Member {
  addedBy: User!
  addedById: HashId!
  chat: Chat!
  chatId: HashId!
  role: MemberRole!
  user: User!
  userId: HashId!
}

type MemberEdge {
  cursor: String!
  node: Member!
}

enum MemberRole {
  Admin
  Basic
  Owner
}

type Message {
  content: String!
  likedBy: [User!]!
}

type Mutation {
  acceptRequest(requestId: Float!): Request!
  acknowledgeAlert: Alert!
  cancelRequest(requestId: Float!): Request!
  declineRequest(requestId: Float!): Request!
  deleteEvent(eventId: Float!): DeletedEvent!
  deleteFriend(userId: Float!): Stranger!
  deletedChat(chatId: HashId!): DeletedChat!
  sendFriendRequest(userId: Float!): FriendRequest!
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

type PaginatedEvent {
  edges: [EventEdge!]
  pageInfo: PageInfo!
  totalCount: Float!
}

type PaginatedFriend {
  edges: [FriendEdge!]
  pageInfo: PageInfo!
  totalCount: Float!
}

type PaginatedMember {
  edges: [MemberEdge!]
  pageInfo: PageInfo!
  totalCount: Float!
}

type PaginatedUser {
  edges: [UserEdge!]
  pageInfo: PageInfo!
  totalCount: Float!
}

union PayloadUnion = ChatDescriptionUpdate | ChatMembersAddedUpdate | ChatMembersRemovedUpdate | Message

type Query {
  alerts: [Alert!]!
  chat(chatId: HashId!): Chat!
  event(eventId: Float!): Event!
  events(after: String, before: String, chatId: Float!, first: Int, last: Int): PaginatedEvent!
  friends(after: String, before: String, filter: String, first: Int, last: Int): PaginatedFriend!
  me: Me!
  users(after: String, before: String, filter: String, first: Int, last: Int): PaginatedUser!
}

interface Request {
  createdAt: DateTime!
  createdBy: User!
  createdById: Float!
  id: HashId!
  isCreator: Boolean!
  recipient: User!
  recipientId: Float!
  state: RequestState!
}

interface RequestResponseAlert implements Alert {
  createdAt: DateTime!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipient: User!
  recipientId: HashId!
  request: Request!
  requestId: HashId!
}

enum RequestState {
  ACCEPTED
  CANCELLED
  DECLINED
  SENT
}

type Stranger implements User {
  createdAt: DateTime!
  friendRequest: FriendRequest
  id: HashId!
  mutualFriends(after: String, before: String, filter: String, first: Int, last: Int): [Friend!]!
  name: String
  updatedAt: DateTime!
  username: String!
}

type Subscription {
  alerts: ChatAlert!
  eventCreated: CreatedEvent!
  eventDeleted: DeletedEvent!
  eventUpdated: Event!
  events: Event!
  requests: Request!
}

interface User {
  createdAt: DateTime!
  id: HashId!
  name: String
  updatedAt: DateTime!
  username: String!
}

type UserEdge {
  cursor: String!
  node: User!
}