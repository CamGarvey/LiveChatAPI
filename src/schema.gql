# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface Alert {
  createdAt: DateTime!
  createdBy: User!
  createdById: Float!
  id: ID!
  isCreator: Boolean!
  recipient: User!
  recipientId: Float!
}

interface Chat {
  createdAt: DateTime!
  createdBy: User!
  id: ID!
  updatedAt: DateTime!
}

interface ChatAlert implements Alert {
  chat: Chat!
  chatId: Float!
  createdAt: DateTime!
  createdBy: User!
  createdById: Float!
  id: ID!
  isCreator: Boolean!
  recipient: User!
  recipientId: Float!
}

type ChatDeletedAlert implements Alert {
  chat: User!
  chatId: Float!
  createdAt: DateTime!
  createdBy: User!
  createdById: Float!
  id: ID!
  isCreator: Boolean!
  recipient: User!
  recipientId: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeletedEvent implements Event {
  chat: Chat!
  chatId: Float!
  createdAt: DateTime!
  createdBy: User!
  createdById: Float!
  deletedAt: DateTime!
  id: ID!
  isCreator: Boolean!
  updatedAt: DateTime!
}

interface Event {
  chat: Chat!
  chatId: Float!
  createdAt: DateTime!
  createdBy: User!
  createdById: Float!
  id: ID!
  isCreator: Boolean!
  updatedAt: DateTime!
}

type Friend implements KnownUser & User {
  chats(after: String, before: String, filter: String, first: Int, last: Int): [Chat!]!
  createdAt: DateTime!
  id: ID!
  name: String
  updatedAt: DateTime!
  username: String!
}

type FriendDeletedAlert implements Alert {
  createdAt: DateTime!
  createdBy: User!
  createdById: Float!
  id: ID!
  isCreator: Boolean!
  recipient: User!
  recipientId: Float!
  user: User!
  userId: Float!
}

type FriendEdge {
  cursor: String!
  node: Friend!
}

type FriendRequest implements Request {
  createdAt: DateTime!
  createdBy: User!
  createdById: Float!
  id: ID!
  isCreator: Boolean!
  recipient: User!
  recipientId: Float!
  state: RequestState!
}

interface KnownUser {
  chats(after: String, before: String, filter: String, first: Int, last: Int): [Chat!]!
}

type Me implements KnownUser & User {
  chats(after: String, before: String, filter: String, first: Int, last: Int): [Chat!]!
  createdAt: DateTime!
  id: ID!
  name: String
  updatedAt: DateTime!
  username: String!
}

type Mutation {
  acceptRequest(requestId: Float!): Request!
  acknowledgeAlert: Alert!
  cancelRequest(requestId: Float!): Request!
  declineRequest(requestId: Float!): Request!
  deleteFriend(userId: Float!): Stranger!
  deletedEvent(eventId: Float!): DeletedEvent!
  sendFriendRequest(userId: Float!): FriendRequest!
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

type PaginatedUser {
  edges: [UserEdge!]
  pageInfo: PageInfo!
  totalCount: Float!
}

type Query {
  alerts: [Alert!]!
  me: Me!
  users(after: String, before: String, filter: String, first: Int, last: Int): PaginatedUser!
}

interface Request {
  createdAt: DateTime!
  createdBy: User!
  createdById: Float!
  id: ID!
  isCreator: Boolean!
  recipient: User!
  recipientId: Float!
  state: RequestState!
}

interface RequestResponseAlert implements Alert {
  createdAt: DateTime!
  createdBy: User!
  createdById: Float!
  id: ID!
  isCreator: Boolean!
  recipient: User!
  recipientId: Float!
  request: Request!
  requestId: Float!
}

enum RequestState {
  ACCEPTED
  CANCELLED
  DECLINED
  SENT
}

type Stranger implements User {
  createdAt: DateTime!
  friendRequest: FriendRequest
  id: ID!
  name: String
  updatedAt: DateTime!
  username: String!
}

interface User {
  createdAt: DateTime!
  id: ID!
  name: String
  updatedAt: DateTime!
  username: String!
}

type UserEdge {
  cursor: String!
  node: User!
}