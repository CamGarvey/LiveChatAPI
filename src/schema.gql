# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface Alert {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipients: [User!]!
}

interface Chat {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  updatedAt: Date!
}

interface ChatAccessAlert implements Alert & ChatAlert {
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipients: [User!]!
}

interface ChatAlert implements Alert {
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipients: [User!]!
}

type ChatDeletedAlert implements Alert {
  chat: User!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipients: [User!]!
}

type ChatMember implements Member {
  addedBy: User!
  addedById: HashId!
  chat: Chat!
  chatId: HashId!
  id: HashId!
  role: Role!
  user: User!
  userId: HashId!
}

type ChatMemberAccessGrantedAlert implements Alert & ChatAccessAlert & ChatAlert {
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipients: [User!]!
}

interface ChatUpdate {
  event: Event!
  eventId: Float!
}

input CreateGroupChatInput {
  """Short description of the group chat"""
  description: String

  """Name of the group chat"""
  name: String!

  """Ids of the users to be added to the group chat"""
  userIds: [HashId!]
}

type CreatedEvent implements Event {
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  payload: PayloadUnion!
  updatedAt: Date!
}

"""Date custom scalar type"""
scalar Date

"""A deleted chat"""
type DeletedChat implements Chat {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  deletedAt: Date!
  id: HashId!
  isCreator: Boolean!
  updatedAt: Date!
}

type DeletedEvent implements Event {
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  deletedAt: Date!
  id: HashId!
  isCreator: Boolean!
  updatedAt: Date!
}

type DescriptionChangedUpdate implements ChatUpdate {
  descriptionAfter: String!
  descriptionBefore: String!
  event: Event!
  eventId: Float!
}

type DirectMessageChat implements Chat {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  receipent: Member!
  updatedAt: Date!
}

interface Event {
  chat: Chat!
  chatId: HashId!
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  updatedAt: Date!
}

type EventEdge {
  cursor: String!
  node: Event!
}

"""A chat you do not have access to"""
type ForbiddenChat implements Chat {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  updatedAt: Date!
}

type Friend implements User {
  createdAt: Date!
  friends(after: String, before: String, filter: String, first: Int, last: Int): PaginatedUser!
  id: HashId!
  name: String
  updatedAt: Date!
  username: String!
}

type FriendDeletedAlert implements Alert {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipients: [User!]!
  user: User!
  userId: HashId!
}

type FriendEdge {
  cursor: String!
  node: Friend!
}

type FriendRequest implements Request {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipient: User!
  recipientId: HashId!
  state: RequestState!
}

type GroupChat implements Chat {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  description: String
  id: HashId!
  isCreator: Boolean!
  members(after: String, before: String, first: Int, last: Int): PaginatedMember!
  name: String!
  role: Role!
  updatedAt: Date!
}

"""Hash Id custom scalar type"""
scalar HashId

type Me implements User {
  createdAt: Date!
  friends(after: String, before: String, filter: String, first: Int, last: Int): PaginatedUser!
  id: HashId!
  name: String
  updatedAt: Date!
  username: String!
}

interface Member {
  addedBy: User!
  addedById: HashId!
  chat: Chat!
  chatId: HashId!
  id: HashId!
  role: Role!
  user: User!
  userId: HashId!
}

interface MemberAlteration implements ChatUpdate {
  event: Event!
  eventId: Float!
  members: [Member!]!
}

type MemberEdge {
  cursor: String!
  node: Member!
}

type MembersAddedUpdate implements ChatUpdate & MemberAlteration {
  event: Event!
  eventId: Float!
  members: [Member!]!
}

type MembersRemovedUpdate implements ChatUpdate & MemberAlteration {
  event: Event!
  eventId: Float!
  members: [Member!]!
}

type Message {
  content: String!
  event: Event!
  eventId: Float!
  likedBy: [User!]!
}

type Mutation {
  acceptRequest(requestId: HashId!): Request!
  acknowledgeAlert(alertId: HashId!): Alert!
  addMembers(chatId: HashId!, userIds: [HashId!]!): MembersAddedUpdate!
  cancelRequest(requestId: HashId!): Request!
  changeMemberRoles(chatId: HashId!, role: Role!, userIds: [HashId!]!): RoleChangedUpdate!
  createDirectMessageChat(receipentUserId: HashId!): DirectMessageChat!
  createGroupChat(createGroupChatData: CreateGroupChatInput!): GroupChat!
  createMessage(chatId: HashId!, content: String!): Message!
  declineRequest(requestId: HashId!): Request!
  deleteEvent(eventId: HashId!): DeletedEvent!
  deleteFriend(userId: HashId!): Stranger!
  deleteRequest(requestId: HashId!): Request!
  deletedChat(chatId: HashId!): DeletedChat!
  removeMembers(chatId: HashId!, userIds: [HashId!]!): MembersRemovedUpdate!
  sendFriendRequest(userId: HashId!): FriendRequest!
  updateGroupChatDescription(chatId: HashId!, description: String!): DescriptionChangedUpdate!
  updateGroupChatName(chatId: HashId!, name: String!): NameChangedUpdate!
  updateMessage(content: String!, eventId: HashId!): Message!
}

type NameChangedUpdate implements ChatUpdate {
  event: Event!
  eventId: Float!
  nameAfter: String!
  nameBefore: String!
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

type PaginatedEvent {
  edges: [EventEdge!]
  pageInfo: PageInfo!
  totalCount: Float!
}

type PaginatedFriend {
  edges: [FriendEdge!]
  pageInfo: PageInfo!
  totalCount: Float!
}

type PaginatedMember {
  edges: [MemberEdge!]
  pageInfo: PageInfo!
  totalCount: Float!
}

type PaginatedUser {
  edges: [UserEdge!]
  pageInfo: PageInfo!
  totalCount: Float!
}

union PayloadUnion = DescriptionChangedUpdate | MembersAddedUpdate | MembersRemovedUpdate | Message | NameChangedUpdate

type Query {
  alerts: [Alert!]!
  chat(chatId: HashId!): Chat!
  chats: [Chat!]!
  event(eventId: HashId!): Event!
  events(after: String, before: String, chatId: HashId!, first: Int, last: Int): PaginatedEvent!
  friends(after: String, before: String, filter: String, first: Int, last: Int): PaginatedFriend!
  me: Me!
  members(after: String, before: String, chatId: HashId!, first: Int, last: Int): PaginatedMember!
  requests: [Request!]!
  users(after: String, before: String, filter: String, first: Int, last: Int): PaginatedUser!
}

type RemovedMember implements Member {
  addedBy: User!
  addedById: HashId!
  chat: Chat!
  chatId: HashId!
  id: HashId!
  removedBy: User!
  removedById: HashId!
  role: Role!
  user: User!
  userId: HashId!
}

interface Request {
  createdAt: Date!
  createdBy: User!
  createdById: HashId!
  id: HashId!
  isCreator: Boolean!
  recipient: User!
  recipientId: HashId!
  state: RequestState!
}

enum RequestState {
  ACCEPTED
  CANCELLED
  DECLINED
  SENT
}

enum Role {
  ADMIN
  BASIC
  OWNER
}

type RoleChangedUpdate implements ChatUpdate & MemberAlteration {
  event: Event!
  eventId: Float!
  members: [Member!]!
  role: Role!
}

type Stranger implements User {
  createdAt: Date!
  friendRequest: FriendRequest
  friends(after: String, before: String, filter: String, first: Int, last: Int): PaginatedUser!
  id: HashId!
  mutualFriends(after: String, before: String, filter: String, first: Int, last: Int): [Friend!]!
  name: String
  updatedAt: Date!
  username: String!
}

type Subscription {
  alerts: ChatAlert!
  chats: Chat!
  events: Event!
  requests: Request!
}

interface User {
  createdAt: Date!
  friends(after: String, before: String, filter: String, first: Int, last: Int): PaginatedUser!
  id: HashId!
  name: String
  updatedAt: Date!
  username: String!
}

type UserEdge {
  cursor: String!
  node: User!
}